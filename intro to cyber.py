# -*- coding: utf-8 -*-
"""Untitled35.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bpDUGe-jVNiStis4DhDD6IPYTzbXXzMq

#Implement any two symmetric encryption algorithms using python

CAESAR CIPHER
In cryptography, the Caesar cipher is one of the simplest and earliest known encryption techniques. It is a substitution cipher where each letter in the plaintext is shifted a certain number of places down or up the alphabet.

Encryption Function:
The user is prompted to enter the plain text message.The implementation iterates over each character in the plain text message.Each character is converted to its ASCII value using the ord() function to facilitate shifting.The ASCII value of each character is shifted forward by 3 positions, which is the key for the Caesar cipher.The shifted ASCII values are converted back to characters using the chr() function.The encrypted characters are concatenated to form the encrypted string.

Decryption Function:
Similar to encryption, the implementation iterates over each character in the cipher text message.Each character's ASCII value is determined using ord().The ASCII value of each character is shifted backward by 3 positions to reverse the encryption.The shifted ASCII values are converted back to characters using chr().The decrypted characters are concatenated to form the decrypted string.
"""

#caesar cipher

def encryption():
    string=""
    for char in plain:
        ascii = ord(char)
        new_ascii=ascii+3
        new_character=chr(new_ascii)
        string=string+new_character
    return string

def decryption():
    string=""
    for char in cipher_text:
        ascii = ord(char)
        new_ascii=ascii-3
        new_character=chr(new_ascii)
        string=string+new_character
    return string


plain=input("Enter the plain text:")
cipher_text=encryption()
print("Encrypted text:",cipher_text)
plain_text=decryption()
print("Decrypted text:",plain_text)

"""# VIGNERE CIPHER

The Vigenere cipher is a form of polyalphabetic substitution cipher, and it's more secure than the simple Caesar cipher. It was invented by Giovan Battista Bellaso in the 16th century and later misattributed to Blaise de Vigenere.

Encryption Function:
The user is prompted to enter the plain text message and the key.The implementation iterates over each character in the plain text message.Only alphabetical characters are considered for encryption. Non-alphabetical characters remain unchanged.The implementation determines the case (upper or lower) of the current character and sets the starting point accordingly (ASCII value of 'A' or 'a').The key is repeated to match the length of the plain text message using the modulo operator (%).Each character in the plain text is shifted cyclically based on the corresponding character in the key, and the result is appended to the cipher text.


Decryption Function:
Similar to encryption, the implementation iterates over each character in the cipher text message.Only alphabetical characters are considered for decryption.The implementation determines the case (upper or lower) of the current character and sets the starting point accordingly (ASCII value of 'A' or 'a').The key is repeated to match the length of the cipher text message using the modulo operator (%).Each character in the cipher text is shifted in the reverse direction based on the corresponding character in the key, and the result is appended to the plain text.
"""

#vignere cipher

def encrypt(plain_text,key):
    cipher_text=""
    for i in range(len(plain_text)):
        char = plain_text[i]
        if char.isalpha():
            if char.isupper():
                start=ord('A')
            else:
                start=ord('a')
            key = key[i % len(key)]
            encrypted_char = chr((ord(char) - start+ ord(key)) % 26 + start)
            cipher_text= cipher_text + encrypted_char
    return cipher_text


def decrypt(cipher_text,key):
    plain_text = ""
    for i in range(len(cipher_text)):
        char = cipher_text[i]
        if char.isalpha():
            if char.isupper():
                start=ord('A')
            else:
                start=ord('a')
            key = key[i % len(key)]
            decrypted_char = chr((ord(char) - start - ord(key)) % 26 + start)
            plain_text=plain_text + decrypted_char
    return plain_text
text=input("Enter the plain text:")
key =input("Enter the key:")
cipher_text = encrypt(text,key)
decrypted_text= decrypt(cipher_text,key)
print("Encrypted text:",cipher_text)
print("Decrypted text:",decrypted_text)